# TODO: here the model recieves a dictionarry {"timestamp": ..., "feature_vector": ...}, makes predictions and sends out an output to kafka
        # [models.append(load_model('/home/costa/JoaoModelsForAlicante/AliPark/models/AliParkModel'+str(i)+'.h5')) for i in range(0,74)]
        # def prediction_train(model):
            # prediction_train = model.predict(self.training_X_data[i])
            # return prediction_train

        # train_predictions = []

        # for i in range(0, len(models)):
        # train_predictions.append(prediction_train(models[i]))

        # Prediction on Test Set
        # def prediction_test(model):
            # prediction_test = model.predict(self.testing_X_data[i])
            # return prediction_test

        # test_predictions = []

        # for i in range(0, len(models)):
            # test_predictions.append(prediction_test(models[i]))
        
        # train_Y_data = []
        # test_Y_data = []
        # TrainErrors = []
        # TestErrors = []
        # for i in range(0, len(self.training_data)):
            # train_Y_data.append(inverse_scaler(self.training_Y_data, self.training_Y_data.min(), self.training_Y_data.max()))
            # TrainErrors.append(self.mse(self.training_Y_data[i][:,0], train_predictions[i][:,0]))
        # for i in range(0, len(self.testing_data)):
            # test_Y_data.append(inverse_scaler(self.testing_Y_data, self.testing_Y_data.min(), self.testing_Y_data.max()))
            # TestErrors.append(self.mse(self.testing_Y_data[i][:,0]), test_predictions[i][:,0])
        